{"version":3,"file":"pipes-module-node.js","sources":["../../../libs/find-pnp-root/src/find-pnp-root.ts","../../../libs/get-nvm-version/src/get-nvm-version.ts","../src/build.ts","../src/pipes-module-node.ts"],"sourcesContent":["/**\n * @file get the nearest base dir of a project\n */\nimport { existsSync } from \"node:fs\";\nimport { join } from \"node:path\";\n\nconst baseDir: Record<string, string> = {};\n\n// This returns the base dir of the project.\nexport const findPnpRoot = (path: string): string => {\n  if (baseDir[path]) {\n    return baseDir[path];\n  }\n  const file = existsSync(join(path, \"./.yarnrc.yml\"));\n  if (file) {\n    baseDir[path] = path;\n    return path;\n  }\n  const newPath = join(path, \"..\");\n  if (path === newPath) {\n    throw new Error(\"Could not find root\");\n  }\n  const basePath = findPnpRoot(newPath);\n  baseDir[path] = basePath;\n  return basePath;\n};\n","import { readFileSync } from \"node:fs\";\nimport { join } from \"node:path\";\n\nimport { findPnpRoot } from \"@island.is/find-pnp-root\";\n\nconst baseDir: Record<string, string> = {};\n\nexport const getNvmVersion = (root: string = process.cwd()): string => {\n  const path = findPnpRoot(root);\n  if (baseDir[path]) {\n    return baseDir[path];\n  }\n  let version: null | string = null;\n  [\".nvmrc\", \".node-version\"]\n    .map((file) => {\n      return () => {\n        const nvmrc = join(path, file);\n        try {\n          return readFileSync(nvmrc, \"utf-8\");\n        } catch (_e) {\n          return null;\n        }\n      };\n    })\n    .find((fn) => {\n      const value = fn();\n      if (value != null) {\n        version = value;\n        return true;\n      }\n      return false;\n    });\n  if (version && typeof version === \"string\") {\n    baseDir[path] = (version as string).trim();\n    return baseDir[path];\n  }\n  throw new Error(\"Not found\");\n};\n","import { builtinModules } from \"node:module\";\n\nimport { rollup } from \"rollup\";\nimport { swc } from \"rollup-plugin-swc3\";\nimport { file as tmpFile } from \"tmp-promise\";\n\nconst nodeResolve = (await import(\"rollup-plugin-node-resolve\")).default;\n\nexport async function compileFile(\n  inputFile: string,\n  additionalExternals: string[] = [],\n  name: string,\n): Promise<string> {\n  const { path: tmpFilePath } = await tmpFile({ prefix: name, postfix: \".mjs\" });\n\n  const config = {\n    input: inputFile,\n    output: {\n      file: tmpFilePath,\n      format: \"esm\" as const,\n    },\n    // @ts-expect-error - wrong typing\n    plugins: [nodeResolve({ module: true, only: [] }), swc({ minify: false })],\n    external: [...builtinModules, ...builtinModules.map((e) => `node:${e}`), ...additionalExternals],\n  };\n\n  const bundle = await rollup(config);\n\n  await bundle.write(config.output);\n  await bundle.close();\n\n  return tmpFilePath;\n}\n","/**\n * @file Core module for pipes\n */\nimport { basename, join } from \"node:path/posix\";\n\nimport { getNvmVersion } from \"@island.is/get-nvm-version\";\nimport { Container, createConfig, createContext, createModule } from \"@island.is/pipes-core\";\n\nimport { compileFile } from \"./build.js\";\n\nimport type { PipesCoreModule, Simplify, createModuleDef } from \"@island.is/pipes-core\";\n\ninterface IPipesNodeConfig {\n  nodeVersion: \"AUTO\" | string;\n  nodeWorkDir: string;\n  nodeSourceDir: string;\n  nodeSourceIncludeOrExclude: \"include\" | \"exclude\" | \"include-and-exclude\";\n  nodeSourceExclude: string[];\n  nodeSourceInclude: string[];\n  nodeImageKey: string;\n}\n\ninterface IPipesNodeContext {\n  nodeAddEnv: (prop: { container?: Container; env: [string, string][] }) => Promise<Container>;\n  nodeGetVersion: () => Promise<string>;\n  nodeGetContainer: () => Promise<Container>;\n  nodePrepareContainer: () => Promise<Container>;\n  nodeCompileAndRun: (props: {\n    file: string;\n    name: string;\n    external: string[];\n    container?: Container;\n    output?: { output: \"stdout\" } | { output: \"stderr\" } | { file: string } | { fileFromEnv: string };\n  }) => Promise<{ error?: true | unknown; message: string; container: Container | null }>;\n}\n\nexport type PipesNodeModule = createModuleDef<\"PipesNode\", IPipesNodeContext, IPipesNodeConfig, [PipesCoreModule]>;\n\nconst PipesNodeConfig = createConfig<PipesNodeModule>(({ z }) => ({\n  nodeImageKey: z.string().default(\"node-dev\"),\n  nodeWorkDir: z.string().default(\"/apps\"),\n  nodeSourceDir: z.string().default(process.cwd()),\n  nodeSourceIncludeOrExclude: z\n    .union([z.literal(\"include\"), z.literal(\"exclude\"), z.literal(\"include-and-exclude\")])\n    .default(\"exclude\"),\n  nodeSourceInclude: z.array(z.string()).default([]),\n  nodeSourceExclude: z\n    .array(z.string())\n    .default([\".env*\", \"**/node_modules\", \"node_modules\", \".yarn/cache\", \".yarn/install-state.gz\", \".yarn/unplugged\"]),\n  nodeVersion: z.string().default(\"AUTO\"),\n}));\n\nconst PipesNodeContext = createContext<PipesNodeModule>(({ z, fn }): PipesNodeModule[\"Context\"][\"Implement\"] => ({\n  nodeAddEnv: fn<{ container?: Container; env: [string, string][] }, Promise<Container>>({\n    value: z.object({ container: z.custom<Container>().optional(), env: z.array(z.tuple([z.string(), z.string()])) }),\n    output: z.custom<Promise<Container>>((val) => val),\n    implement: async (context, config, { container, env }) => {\n      const imageStore = await context.imageStore;\n      const usedContainer = container || (await imageStore.awaitForAvailability(`node-${config.nodeImageKey}`));\n      const newContainer = context.addEnv({ container: usedContainer, env });\n      return newContainer;\n    },\n  }),\n  nodeCompileAndRun: fn<\n    {\n      file: string;\n      external: string[];\n      name: string;\n      container?: Container;\n      output?: { output: \"stdout\" } | { output: \"stderr\" } | { file: string } | { fileFromEnv: string };\n    },\n    Promise<{ error?: true | unknown; message: string; container: Container | null }>\n  >({\n    value: z.object({\n      container: z.custom<Container>().optional(),\n      file: z.string(),\n      name: z.string(),\n      output: z\n        .union([\n          z.object({ output: z.literal(\"stdout\") }),\n          z.object({ output: z.literal(\"stderr\") }),\n          z.object({ file: z.string() }),\n          z.object({ fileFromEnv: z.string() }),\n        ])\n        .default({ output: \"stdout\" })\n        .optional(),\n      external: z.array(z.string()).default([]),\n      env: z.record(z.string(), z.string()).default({}),\n    }),\n    output: z.custom<Promise<{ error?: true | unknown; message: string; container: Container | null }>>((val) => {\n      return val;\n    }),\n    implement: async (context, config, { container, name, file, external, output = { output: \"stdout\" } }) => {\n      let value: Container;\n      const getMessage = async (messageContainer: Container) => {\n        if (!messageContainer) {\n          throw new Error(\"Container unassigned\");\n        }\n        if (\"output\" in output) {\n          if (output.output === \"stdout\") {\n            return messageContainer.stdout();\n          }\n          if (output.output === \"stderr\") {\n            return messageContainer.stderr();\n          }\n        }\n        if (\"file\" in output) {\n          const outputFile = (await messageContainer.file(output.file).sync()).contents();\n          return outputFile;\n        }\n        if (\"fileFromEnv\" in output) {\n          const fileName = await messageContainer.envVariable(output.fileFromEnv);\n          const outputFile = await (await messageContainer.file(fileName).sync()).contents();\n          return outputFile;\n        }\n        // Default behaviour\n        return messageContainer.stdout();\n      };\n      try {\n        const tmpFile = await compileFile(file, external, name);\n        const imageStore = await context.imageStore;\n        value = await (container ?? imageStore.awaitForAvailability(`node-${config.nodeImageKey}`));\n        const tmpFileRef = context.client.host().file(tmpFile);\n        value = await (\n          await value\n            .withWorkdir(config.nodeWorkDir)\n            .withFile(join(config.nodeWorkDir, basename(tmpFile)), tmpFileRef)\n            .withExec([\"yarn\", \"node\", basename(tmpFile)])\n            .sync()\n        )\n          .withExec([\"rm\", basename(tmpFile)])\n          .sync();\n        return {\n          message: await getMessage(value),\n          container: value,\n        };\n      } catch (e) {\n        const message = await (() => {\n          try {\n            /* @ts-expect-error - this could been unassigned */\n            return getMessage(value);\n          } catch {\n            return `Error occured with ${file} using prefix: ${name}`;\n          }\n        })();\n        return {\n          error: e,\n          message,\n          container: null,\n        };\n      }\n    },\n  }),\n  nodeGetVersion: fn<undefined, Promise<string>>({\n    value: undefined,\n    output: z.custom<Promise<string>>((val) => {\n      // FIX PROMISE VALIDATION\n      return val;\n    }),\n    implement: async (_context, config) => {\n      if (config.nodeVersion === \"AUTO\") {\n        // TODO move to async:\n        const nodeVersion = await getNvmVersion(config.nodeSourceDir);\n        config.nodeVersion = nodeVersion;\n      }\n      // No need to call this again. The version has been set for the context.\n      return config.nodeVersion;\n    },\n  }),\n  nodePrepareContainer: fn<undefined, Promise<Container>>({\n    output: z.promise(\n      z.custom<Container>((val) => {\n        if (val instanceof Container) {\n          return val;\n        }\n        throw new Error(`Invalid value`);\n      }),\n    ),\n    implement: async (context, config) => {\n      return (await context.imageStore).getOrSet(`node-${config.nodeImageKey}`, async () => {\n        const container = await context.nodeGetContainer();\n        const sourceOptions = {\n          ...(config.nodeSourceIncludeOrExclude === \"include\" ||\n          config.nodeSourceIncludeOrExclude === \"include-and-exclude\"\n            ? {\n                include: config.nodeSourceInclude,\n              }\n            : {}),\n          ...(config.nodeSourceIncludeOrExclude === \"exclude\" ||\n          config.nodeSourceIncludeOrExclude === \"include-and-exclude\"\n            ? {\n                exclude: config.nodeSourceExclude,\n              }\n            : {}),\n        };\n        // Currently we are just using yarn\n        const source = context.client.host().directory(config.nodeSourceDir, sourceOptions);\n        const corepack = await container\n          .withDirectory(config.nodeWorkDir, source)\n          .withWorkdir(config.nodeWorkDir)\n          .withExec([\"corepack\", \"enable\"])\n          .sync();\n        const yarnInstall = await corepack.withExec([\"yarn\", \"install\"]).sync();\n        return yarnInstall;\n      });\n    },\n  }),\n  nodeGetContainer: fn<undefined, Promise<Container>>({\n    output: z.promise(\n      z.custom<Container>((val) => {\n        if (val instanceof Container) {\n          return val;\n        }\n        throw new Error(`Invalid value`);\n      }),\n    ),\n    implement: async (context, _config) => {\n      const version = await context.nodeGetVersion();\n      return (await context.imageStore).getOrSet(`base-node-${version}`, () => {\n        const container = context.client.container().from(`node:${version}`);\n        return container;\n      });\n    },\n  }),\n}));\n\nexport const PipesNode: {\n  name: \"PipesNode\";\n  config: Simplify<PipesNodeModule[\"Config\"][\"Implement\"]>;\n  context: Simplify<PipesNodeModule[\"Context\"][\"Implement\"]>;\n  required: \"PipesCore\"[];\n  optional: [];\n} = createModule<PipesNodeModule>({\n  name: \"PipesNode\",\n  config: PipesNodeConfig,\n  context: PipesNodeContext,\n  required: [\"PipesCore\"],\n});\n"],"names":["baseDir","findPnpRoot","path","file","existsSync","join","newPath","Error","basePath","getNvmVersion","root","process","cwd","version","map","nvmrc","readFileSync","_e","find","fn","value","trim","nodeResolve","default","compileFile","inputFile","additionalExternals","name","tmpFilePath","tmpFile","prefix","postfix","config","input","output","format","plugins","module","only","swc","minify","external","builtinModules","e","bundle","rollup","write","close","PipesNodeConfig","createConfig","z","nodeImageKey","string","nodeWorkDir","nodeSourceDir","nodeSourceIncludeOrExclude","union","literal","nodeSourceInclude","array","nodeSourceExclude","nodeVersion","PipesNodeContext","createContext","nodeAddEnv","object","container","custom","optional","env","tuple","val","implement","context","imageStore","usedContainer","awaitForAvailability","newContainer","addEnv","nodeCompileAndRun","fileFromEnv","record","getMessage","messageContainer","stdout","stderr","outputFile","sync","contents","fileName","envVariable","tmpFileRef","client","host","withWorkdir","withFile","basename","withExec","message","error","nodeGetVersion","undefined","_context","nodePrepareContainer","promise","Container","getOrSet","nodeGetContainer","sourceOptions","include","exclude","source","directory","corepack","withDirectory","yarnInstall","_config","from","PipesNode","createModule","required"],"mappings":"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"}