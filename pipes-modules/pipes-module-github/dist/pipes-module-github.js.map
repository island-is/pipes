{"version":3,"file":"pipes-module-github.js","sources":["../src/pipes-module-github.ts"],"sourcesContent":["import fsSync from \"node:fs\";\n\nimport {\n  type PipesCoreModule,\n  type Simplify,\n  createConfig,\n  createContext,\n  createModule,\n  type createModuleDef,\n  z,\n} from \"@island.is/pipes-core\";\nimport { Octokit } from \"@octokit/rest\";\n\n// Get default needs to be run sync\n\ntype GithubUser = {\n  login: string;\n};\n\ntype GithubRepository = {\n  fullName: string;\n  name: string;\n  owner: GithubUser;\n};\n\ntype GithubPRUrls = {\n  htmlUrl: string;\n  commentsUrl: string;\n};\n\ntype GithubPR = {\n  name: string;\n  number: number;\n  action: string;\n  sourceBranch: string;\n  targetBranch: string;\n  initiator: GithubUser;\n  repository: GithubRepository;\n  urls: GithubPRUrls;\n} | null;\n\ninterface IGitHubConfig {\n  githubToken: string;\n  githubOwner: string;\n  githubRepo: string;\n  githubCurrentPr: GithubPR;\n}\n\ninterface IGitHubContext {\n  githubDeleteMergedBranch: (prop: { branchName: string }) => Promise<void>;\n  githubDeleteCurrentMergedBranch: () => Promise<void>;\n  githubInitPr: () => void;\n  githubOctokit: Octokit | null;\n  githubMergePR: (prop: { prNumber: number }) => Promise<void>;\n  githubMergeCurrentPR: () => Promise<void>;\n  githubGetOctokit: () => Octokit;\n  githubWriteCommentToPR: (prop: { prNumber: number; comment: string }) => Promise<void>;\n  githubAddTagToPR: (prop: { prNumber: number; tagName: string }) => Promise<void>;\n  githubRemoveTagToPR: (prop: { prNumber: number; tagName: string }) => Promise<void>;\n  githubAddTagToCurrentPr: (prop: { tagName: string }) => Promise<void>;\n  githubRemoveTagFromCurrentPr: (prop: { tagName: string }) => Promise<void>;\n  githubWriteCommentToCurrentPr: (prop: { comment: string }) => Promise<void>;\n  githubAllChecksPassed: (prop: { prNumber: number }) => Promise<boolean>;\n  githubAllChecksPassedCurrentPR: () => Promise<boolean>;\n}\n\nexport type PipesGitHubModule = createModuleDef<\"PipesGitHub\", IGitHubContext, IGitHubConfig, [PipesCoreModule]>;\n\nconst githubUserschema = z.object({ login: z.string() }).default({ login: \"\" });\nconst githubRepository = z\n  .object({\n    fullName: z.string(),\n    name: z.string(),\n    owner: githubUserschema,\n  })\n  .default({\n    fullName: \"\",\n    name: \"\",\n    owner: {\n      login: \"\",\n    },\n  });\nconst githubPRUrls = z\n  .object({\n    htmlUrl: z.string(),\n    commentsUrl: z.string(),\n  })\n  .default({\n    htmlUrl: \"\",\n    commentsUrl: \"\",\n  });\n\nconst getDefaultIfCI = (): IGitHubConfig[\"githubCurrentPr\"] | undefined => {\n  // Check if running in a GitHub Actions environment\n  if (process.env.CI !== \"true\" || !process.env.GITHUB_EVENT_PATH) {\n    return undefined;\n  }\n\n  // Read the GitHub Actions event payload\n  const eventPath = process.env.GITHUB_EVENT_PATH;\n  const eventData = JSON.parse(fsSync.readFileSync(eventPath, \"utf8\"));\n  if (!eventData.pull_request) {\n    return undefined;\n  }\n\n  const prData = eventData.pull_request;\n  const repositoryData = eventData.repository;\n  const actionData = eventData.action;\n\n  const value: IGitHubConfig[\"githubCurrentPr\"] = {\n    name: repositoryData.full_name as string,\n    number: prData.number as number,\n    action: actionData as string,\n    sourceBranch: prData.head.ref as string,\n    targetBranch: prData.base.ref as string,\n    initiator: {\n      login: prData.user.login as string,\n    },\n    repository: {\n      fullName: repositoryData.full_name as string,\n      name: repositoryData.name as string,\n      owner: {\n        login: repositoryData.owner.login as string,\n      },\n    },\n    urls: {\n      htmlUrl: prData.html_url as string,\n      commentsUrl: prData.comments_url as string,\n    },\n  };\n  // Test parsing\n  const parsed = z\n    .object({\n      name: z.string(),\n      number: z.number(),\n      action: z.string(),\n      sourceBranch: z.string(),\n      targetBranch: z.string(),\n      initiator: githubUserschema,\n      repository: githubRepository,\n      urls: githubPRUrls,\n    })\n    .strict()\n    .safeParse(value);\n  return parsed.success ? parsed.data : undefined;\n};\nconst GitHubConfig = createConfig<PipesGitHubModule>(({ z }) => ({\n  githubToken: z.string().default(process.env.GITHUB_TOKEN ?? \"\"),\n  githubOwner: z.string().default(process.env.GITHUB_REPOSITORY?.split(\"/\")[0] ?? \"\"),\n  githubRepo: z.string().default(process.env.GITHUB_REPOSITORY?.split(\"/\")[1] ?? \"\"),\n  githubCurrentPr: z.optional(\n    z.object({\n      name: z.string(),\n      number: z.number(),\n      action: z.string(),\n      sourceBranch: z.string(),\n      targetBranch: z.string(),\n      initiator: githubUserschema,\n      repository: githubRepository,\n      urls: githubPRUrls,\n    }),\n  ),\n}));\n\nconst GitHubContext = createContext<PipesGitHubModule>(({ z, fn }): PipesGitHubModule[\"Context\"][\"Implement\"] => ({\n  githubDeleteMergedBranch: fn<{ branchName: string }, Promise<void>>({\n    value: z.object({ branchName: z.string() }),\n    output: z.custom<Promise<void>>(),\n    implement: async (context, config, { branchName }) => {\n      const owner = config.githubOwner;\n      const repo = config.githubRepo;\n\n      const octokit = context.githubGetOctokit();\n\n      await octokit.rest.git.deleteRef({\n        owner,\n        repo,\n        ref: `heads/${branchName}`,\n      });\n    },\n  }),\n\n  // Function to delete the branch of the current PR if it is merged\n  githubDeleteCurrentMergedBranch: fn<undefined, Promise<void>>({\n    output: z.custom<Promise<void>>(),\n    implement: async (context, config) => {\n      if (!config.githubCurrentPr?.sourceBranch) {\n        throw new Error(\"Current PR info not available\");\n      }\n      await context.githubDeleteMergedBranch({ branchName: config.githubCurrentPr.sourceBranch });\n    },\n  }),\n  githubAllChecksPassed: fn<{ prNumber: number }, Promise<boolean>>({\n    value: z.object({ prNumber: z.number() }),\n    output: z.custom<Promise<boolean>>((val) => val),\n    implement: async (context, config, { prNumber }) => {\n      const owner = config.githubOwner;\n      const repo = config.githubRepo;\n\n      const octokit = context.githubGetOctokit();\n      const { data: prData } = await octokit.rest.pulls.get({\n        owner,\n        repo,\n        pull_number: prNumber,\n      });\n\n      const { data: checkRuns } = await octokit.rest.checks.listForRef({\n        owner,\n        repo,\n        ref: prData.head.sha,\n      });\n\n      return checkRuns.check_runs.every((run) => run.conclusion === \"success\");\n    },\n  }),\n  githubAllChecksPassedCurrentPR: fn<undefined, Promise<boolean>>({\n    output: z.custom<Promise<boolean>>(),\n    implement: (context, config) => {\n      if (!config.githubCurrentPr?.number) {\n        throw new Error(\"Current PR info not available\");\n      }\n      return context.githubAllChecksPassed({ prNumber: config.githubCurrentPr.number });\n    },\n  }),\n  githubInitPr: fn<undefined, void>({\n    implement: (_context, config) => {\n      const value = getDefaultIfCI();\n      if (value) {\n        config.githubToken = process.env.GITHUB_TOKEN ?? \"\";\n        config.githubOwner = (process.env.GITHUB_REPOSITORY ?? \"\").split(\"/\")[0];\n        config.githubRepo = (process.env.GITHUB_REPOSITORY ?? \"\").split(\"/\")[1];\n        config.githubCurrentPr = value;\n        return;\n      }\n      throw new Error(\"Could not set config\");\n    },\n  }),\n  githubOctokit: z.optional(z.custom<Octokit>()),\n  githubGetOctokit: fn<undefined, Octokit>({\n    output: z.custom<Octokit>(),\n    implement: (context, config) => {\n      if (!config.githubToken) {\n        throw new Error(\"GitHub token not available\");\n      }\n\n      if (!context.githubOctokit) {\n        context.githubOctokit = new Octokit({ auth: config.githubToken });\n      }\n      return context.githubOctokit;\n    },\n  }),\n\n  githubWriteCommentToPR: fn<{ prNumber: number; comment: string }, Promise<void>>({\n    value: z.object({\n      prNumber: z.number(),\n      comment: z.string(),\n    }),\n    output: z.custom<Promise<void>>((val) => val),\n    implement: async (context, config, { prNumber, comment }) => {\n      const owner = config.githubOwner;\n      const repo = config.githubRepo;\n\n      await context.githubGetOctokit().rest.issues.createComment({\n        owner,\n        repo,\n        issue_number: prNumber,\n        body: comment,\n      });\n    },\n  }),\n  githubRemoveTagToPR: fn<{ prNumber: number; tagName: string }, Promise<void>>({\n    value: z.object({\n      prNumber: z.number(),\n      tagName: z.string(),\n    }),\n    output: z.custom<Promise<void>>((val) => val),\n    implement: async (context, config, { prNumber, tagName }) => {\n      const owner = config.githubOwner;\n      const repo = config.githubRepo;\n\n      await context.githubGetOctokit().rest.issues.removeLabel({\n        owner,\n        repo,\n        issue_number: prNumber,\n        name: tagName,\n      });\n    },\n  }),\n  githubAddTagToPR: fn<{ prNumber: number; tagName: string }, Promise<void>>({\n    value: z.object({\n      prNumber: z.number(),\n      tagName: z.string(),\n    }),\n    output: z.custom<Promise<void>>((val) => val),\n    implement: async (context, config, { prNumber, tagName }) => {\n      const owner = config.githubOwner;\n      const repo = config.githubRepo;\n\n      await context.githubGetOctokit().rest.issues.addLabels({\n        owner,\n        repo,\n        issue_number: prNumber,\n        labels: [tagName],\n      });\n    },\n  }),\n  githubAddTagToCurrentPr: fn<{ tagName: string }, Promise<void>>({\n    value: z.object({ tagName: z.string() }),\n    output: z.custom<Promise<void>>(),\n    implement: async (context, config, { tagName }) => {\n      if (!config.githubCurrentPr?.number) {\n        throw new Error(\"Current PR info not available\");\n      }\n      await context.githubAddTagToPR({ prNumber: config.githubCurrentPr.number, tagName });\n    },\n  }),\n\n  githubRemoveTagFromCurrentPr: fn<{ tagName: string }, Promise<void>>({\n    value: z.object({ tagName: z.string() }),\n    output: z.custom<Promise<void>>(),\n    implement: async (context, config, { tagName }) => {\n      if (!config.githubCurrentPr?.number) {\n        throw new Error(\"Current PR info not available\");\n      }\n      await context.githubRemoveTagToPR({ prNumber: config.githubCurrentPr.number, tagName });\n    },\n  }),\n\n  githubWriteCommentToCurrentPr: fn<{ comment: string }, Promise<void>>({\n    value: z.object({ comment: z.string() }),\n    output: z.custom<Promise<void>>(),\n    implement: async (context, config, { comment }) => {\n      if (!config.githubCurrentPr?.number) {\n        throw new Error(\"Current PR info not available\");\n      }\n      await context.githubWriteCommentToPR({ prNumber: config.githubCurrentPr.number, comment });\n    },\n  }),\n  githubMergePR: fn<{ prNumber: number }, Promise<void>>({\n    value: z.object({\n      prNumber: z.number(),\n    }),\n    output: z.custom<Promise<void>>(),\n    implement: async (context, config, { prNumber }) => {\n      const owner = config.githubOwner;\n      const repo = config.githubRepo;\n\n      await context.githubGetOctokit().rest.pulls.merge({\n        owner,\n        repo,\n        pull_number: prNumber,\n        merge_method: \"squash\",\n      });\n    },\n  }),\n  githubMergeCurrentPR: fn<undefined, Promise<void>>({\n    output: z.custom<Promise<void>>(),\n    implement: async (context, config) => {\n      if (!config.githubCurrentPr?.number) {\n        throw new Error(\"Current PR info not available\");\n      }\n      await context.githubMergePR({ prNumber: config.githubCurrentPr.number });\n    },\n  }),\n}));\n\nexport const PipesGitHub: {\n  name: \"PipesGitHub\";\n  config: Simplify<PipesGitHubModule[\"Config\"][\"Implement\"]>;\n  context: Simplify<PipesGitHubModule[\"Context\"][\"Implement\"]>;\n  required: \"PipesCore\"[];\n  optional: [];\n} = createModule<PipesGitHubModule>({\n  name: \"PipesGitHub\",\n  config: GitHubConfig,\n  context: GitHubContext,\n  required: [\"PipesCore\"],\n  optional: [],\n});\n"],"names":["githubUserschema","z","object","login","string","default","githubRepository","fullName","name","owner","githubPRUrls","htmlUrl","commentsUrl","getDefaultIfCI","process","env","CI","GITHUB_EVENT_PATH","undefined","eventPath","eventData","JSON","parse","fsSync","readFileSync","pull_request","prData","repositoryData","repository","actionData","action","value","full_name","number","sourceBranch","head","ref","targetBranch","base","initiator","user","urls","html_url","comments_url","parsed","strict","safeParse","success","data","GitHubConfig","createConfig","githubToken","GITHUB_TOKEN","githubOwner","GITHUB_REPOSITORY","split","githubRepo","githubCurrentPr","optional","GitHubContext","createContext","fn","githubDeleteMergedBranch","branchName","output","custom","implement","context","config","repo","octokit","githubGetOctokit","rest","git","deleteRef","githubDeleteCurrentMergedBranch","Error","githubAllChecksPassed","prNumber","val","pulls","get","pull_number","checkRuns","checks","listForRef","sha","check_runs","every","run","conclusion","githubAllChecksPassedCurrentPR","githubInitPr","_context","githubOctokit","Octokit","auth","githubWriteCommentToPR","comment","issues","createComment","issue_number","body","githubRemoveTagToPR","tagName","removeLabel","githubAddTagToPR","addLabels","labels","githubAddTagToCurrentPr","githubRemoveTagFromCurrentPr","githubWriteCommentToCurrentPr","githubMergePR","merge","merge_method","githubMergeCurrentPR","PipesGitHub","createModule","required"],"mappings":"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"}