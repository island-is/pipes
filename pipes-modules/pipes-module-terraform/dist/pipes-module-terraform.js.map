{"version":3,"file":"pipes-module-terraform.js","sources":["../src/util.ts","../src/pipes-module-terraform.ts"],"sourcesContent":["import { lstat } from \"fs/promises\";\nimport { readdir, stat } from \"node:fs/promises\";\nimport { join } from \"node:path\";\n\nexport const doesFileExists = async (file: string): Promise<boolean> =>\n  lstat(file)\n    .catch(() => false)\n    .then(() => true);\n\ninterface Props {\n  extension?: string;\n  directory?: boolean;\n  path: string;\n}\n\nexport const getFilesFromPath = async (props: Props): Promise<string[]> => {\n  const files = (await readdir(props.path)).map((e) => join(props.path, e));\n  if (props.extension) {\n    return files.filter((file) => file.endsWith(props.extension!));\n  }\n  if (props.directory) {\n    return Promise.all(\n      files.filter(async (file) => {\n        const fileStat = await stat(join(props.path, file));\n        return fileStat.isDirectory();\n      }),\n    );\n  }\n  return files ?? [];\n};\n","/**\n * @file Core module for pipes\n */\nimport { readFile } from \"node:fs/promises\";\nimport { join } from \"node:path/posix\";\n\nimport { createConfig, createContext, z } from \"@island.is/pipes-core\";\n\nimport { doesFileExists, getFilesFromPath } from \"./util.js\";\n\nimport type { Container, PipesCoreModule, Simplify, createModuleDef } from \"@island.is/pipes-core\";\n/**\n * @file Core module for pipes\n */\n\nconst Name = z.string().min(1);\nconst Path = z.string().or(z.array(z.string())).describe(\"Path\");\n\nconst TerraformEnvironment = z.object({\n  name: Name,\n  terraformDirectory: Path.default([]),\n  terraformEnvVariables: z.record(z.string(), z.string()).default({}),\n  terraformVersion: z.literal(\"AUTO\").or(z.string()).default(\"AUTO\").describe(\"The version of terraform to use\"),\n  terraformDefaultVersion: z.literal(\"NONE\").or(z.string()).default(\"NONE\"),\n  terraformGoThroughSubdirectories: z.boolean().default(false).or(z.number()).default(false),\n});\n\ntype TerraformEnvironment = Simplify<z.infer<typeof TerraformEnvironment>>;\n\nexport interface BaseEnvOutput {\n  directories: string[];\n}\n\ninterface IConfig {\n  terraformRoot: string;\n  terraformEnvironments: Record<string, TerraformEnvironment>;\n}\n\ninterface IContext {\n  terraformGetImage: (prop: { version: string }) => Container;\n  terrafromRunPlan: () => Promise<void>;\n  terrafromRunApply: () => Promise<void>;\n  terraformBaseRunEnv: (props: { env: TerraformEnvironment }) => Promise<BaseEnvOutput>;\n  terraformRunPlanOnEnv: (prop: { env: string }) => Promise<void>;\n  terraformRunPlanOnDirectory: (prop: { path: string }) => Promise<void>;\n  terraformGetVersionFromDirectory: (prop: { env: TerraformEnvironment; path: string }) => Promise<string>;\n}\n\nexport type PipesTerraformModule = createModuleDef<\"PipesTerraform\", IContext, IConfig, [PipesCoreModule]>;\n\nconst TerraformConfig = createConfig<PipesTerraformModule>(({ z }) => ({\n  terraformRoot: z.string().default(process.cwd()).describe(\"The root directory of terraform\"),\n  terraformEnvironments: z.custom<Record<string, TerraformEnvironment>>((value) => {\n    if (typeof value !== \"object\" || !value) {\n      throw new Error(`This should be a record`);\n    }\n    Object.entries(value).forEach(([key, keyValue]) => {\n      if (typeof key !== \"string\") {\n        throw new Error(`Key should be string`);\n      }\n      TerraformEnvironment.parse(keyValue);\n    });\n    return value;\n  }),\n}));\n\nexport const PathIncludesPath = (path: string, rootPath: string | string[]): boolean => {\n  if (typeof rootPath === \"string\") {\n    return path.startsWith(rootPath);\n  }\n  return !!rootPath.find((e) => path.startsWith(e));\n};\n\nconst cache: Record<string, string> = {};\n\nconst TerraformContext = createContext<PipesTerraformModule>(({ z, fn }) => ({\n  terrafromRunPlan: fn<{}, void>({\n    value: z.object({}).default({}),\n    output: z.custom<void>(),\n    implement: (context, config) => {\n      throw new Error(\"To do\");\n    },\n  }),\n  terrafromRunApply: fn<{}, void>({\n    value: z.object({}).default({}),\n    output: z.custom<void>(),\n    implement: () => {\n      throw new Error(\"To do\");\n    },\n  }),\n  terraformBaseRunEnv: fn<{ env: TerraformEnvironment }, Promise<BaseEnvOutput>>({\n    value: z.object({ env: TerraformEnvironment }).default({ env: {} as TerraformEnvironment }),\n    output: z.custom<Promise<BaseEnvOutput>>(),\n    implement: async (context, config, { env }: { env: TerraformEnvironment }) => {\n      const basePath = env.terraformDirectory;\n      if (!basePath) {\n        throw new Error(`No working directory found for ${env.name}`);\n      }\n      const checkPaths = async (\n        basePath: string,\n        shouldGoThroughSubdirectories = env.terraformGoThroughSubdirectories,\n      ): Promise<string[]> => {\n        const isWorkingPathAvailable = await doesFileExists(basePath);\n        if (!isWorkingPathAvailable) {\n          throw new Error(`Working directory not found for ${env} at ${basePath}`);\n        }\n        const nextSubdirectoryCheck =\n          typeof shouldGoThroughSubdirectories == \"number\"\n            ? shouldGoThroughSubdirectories - 1\n            : shouldGoThroughSubdirectories;\n        const hasTerraform = (await getFilesFromPath({ path: basePath, extension: \".tf\" })).length > 0;\n        const subdirectories = await Promise.all(\n          shouldGoThroughSubdirectories\n            ? (await getFilesFromPath({ path: basePath, directory: true })).map((e) =>\n                checkPaths(e, nextSubdirectoryCheck),\n              )\n            : [],\n        );\n        return hasTerraform ? [basePath, ...subdirectories].flat() : subdirectories.flat();\n      };\n      const directories = (\n        await Promise.all(\n          Array.isArray(basePath)\n            ? basePath.map((path) => checkPaths(path)).flat()\n            : (await checkPaths(basePath)).flat(),\n        )\n      ).flat();\n\n      return {\n        directories,\n      };\n    },\n  }),\n  terraformRunPlanOnEnv: fn<{ env: string }, Promise<void>>({\n    value: z.object({ env: z.string() }).default({ env: \"\" }),\n    output: z.custom<Promise<void>>(),\n    implement: (context, config, prop: { env: string }) => {\n      throw new Error(\"To do\");\n    },\n  }),\n  terraformRunPlanOnDirectory: fn<{ path: string }, Promise<void>>({\n    value: z.object({ path: z.string() }).default({ path: \"\" }),\n    output: z.custom<Promise<void>>(),\n    implement: (context, config, prop: { path: string }) => {\n      throw new Error(\"To do\");\n    },\n  }),\n  terraformGetVersionFromDirectory: fn<{ path: string; env: TerraformEnvironment }, Promise<string>>({\n    value: z.custom<{ path: string; env: TerraformEnvironment }>((value) => {\n      if (typeof value !== \"object\" || !value) {\n        throw new Error(`Incorrect parameters`);\n      }\n      if (!(\"path\" in value)) {\n        throw new Error(`Incorrect parameter, path missing`);\n      }\n      if (!(\"env\" in value)) {\n        throw new Error(`Incorrect parameter, env missing`);\n      }\n      Path.parse(value.path);\n      TerraformEnvironment.parse(value.env);\n    }),\n    output: z.custom<Promise<string>>(),\n    implement: async (context, config, { env, path }) => {\n      if (!PathIncludesPath(path, env.terraformDirectory)) {\n        throw new Error(\n          // eslint-disable-next-line max-len\n          `${path} cannot by used ${env.name} - path is not a subdirectory of env\\n Possible reason: Traveled too far to find version file?`,\n        );\n      }\n      // Force usage of this version\n      if (env.terraformVersion !== \"AUTO\") {\n        return env.terraformVersion;\n      }\n      // Cached answer\n      if (cache[path]) {\n        return cache[path];\n      }\n\n      try {\n        const terraformVersionPath = join(path, \".terraform-version\");\n        const content = await readFile(terraformVersionPath, \"utf-8\");\n        cache[path] = content;\n        return content;\n      } catch {\n        // Travel further to find version\n        const value = await context.terraformGetVersionFromDirectory({ path: join(path, \"..\"), env });\n        cache[path] = value;\n        return value;\n      }\n    },\n  }),\n  terraformGetImage: fn<{ version: string }, Container>({\n    value: z.object({ version: z.string() }).default({ version: \"AUTO\" }),\n    output: z.custom<Container>(),\n    implement: (context, config, { version }) => {\n      return context.client.container().from(`hashicorp/terraform:${version}`);\n    },\n  }),\n}));\n"],"names":["doesFileExists","file","lstat","catch","then","getFilesFromPath","props","files","readdir","path","map","e","join","extension","filter","endsWith","directory","Promise","all","fileStat","stat","isDirectory","Name","z","string","min","Path","or","array","describe","TerraformEnvironment","object","name","terraformDirectory","default","terraformEnvVariables","record","terraformVersion","literal","terraformDefaultVersion","terraformGoThroughSubdirectories","boolean","number","createConfig","terraformRoot","process","cwd","terraformEnvironments","custom","value","Error","Object","entries","forEach","key","keyValue","parse","PathIncludesPath","rootPath","startsWith","find","cache","createContext","fn","terrafromRunPlan","output","implement","context","config","terrafromRunApply","terraformBaseRunEnv","env","basePath","checkPaths","shouldGoThroughSubdirectories","isWorkingPathAvailable","nextSubdirectoryCheck","hasTerraform","length","subdirectories","flat","directories","Array","isArray","terraformRunPlanOnEnv","prop","terraformRunPlanOnDirectory","terraformGetVersionFromDirectory","terraformVersionPath","content","readFile","terraformGetImage","version","client","container","from"],"mappings":"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"}