{"version":3,"file":"loader.mjs","sources":["../src/loader/get-all-workspaces.ts","../src/loader/get-local-package-scope.ts","../src/loader/const.ts","../src/loader/libs/get-package-type.ts","../src/loader/load.ts","../src/loader/libs/convert-url.ts","../src/loader/libs/is-relative-path.ts","../src/loader/libs/convert-file-path.ts","../src/loader/libs/is-directory.ts","../src/loader/libs/convert-url-to-directory.ts","../src/loader/libs/does-file-exist.ts","../src/loader/libs/should-compile.ts","../src/loader/resolve.ts"],"sourcesContent":["import { readFile } from \"node:fs/promises\";\nimport { join, sep } from \"node:path\";\n\nimport { glob } from \"glob\";\nexport interface LocalPackage {\n  name: string;\n  source: string;\n}\nexport const getAllWorkspaces = async (root: string): Promise<Record<string, LocalPackage>> => {\n  // Get workspaces\n  const json = JSON.parse(await readFile(join(root, \"package.json\"), \"utf-8\"));\n  const jsonWorkspaces = (json.workspaces as string[]).map((e) => {\n    return join(root, ...e.split(\"/\"), \"package.json\");\n  });\n  const projects: Record<string, LocalPackage> = {};\n  const values = (\n    await Promise.all(\n      (await glob(jsonWorkspaces)).map(async (e) => {\n        const content = JSON.parse(await readFile(e, \"utf-8\"));\n        const relative = \"source\" in content ? content.source : content.dist;\n        if (!relative) {\n          return null;\n        }\n        const workspaceRoot = e.replace(`package.json`, \"\");\n        const absolutePath = `${sep}${join(...workspaceRoot.split(sep), ...relative.split(\"/\"))}`;\n        const name = content.name;\n        return {\n          name: name,\n          source: absolutePath,\n        };\n      }),\n    )\n  ).filter((e): e is LocalPackage => !!e);\n  for (const value of values) {\n    projects[value.name] = value;\n  }\n  return projects;\n};\n","import { readFile } from \"node:fs/promises\";\nimport { join } from \"node:path\";\n\nconst obj: Record<string, null | string> = {};\n\nexport const getLocalPackageScoop = async (rootPath: string): Promise<string | null> => {\n  if (typeof obj[rootPath] === \"string\") {\n    return obj[rootPath];\n  }\n  try {\n    const file = join(rootPath, \".yarnrc.yml\");\n    const data = await readFile(file, \"utf-8\");\n    const content = data.match(/initScope:(.*)\\n/g);\n    if (!content || !content[0]) {\n      return null;\n    }\n    const initScope = `@${content[0].replaceAll(\"initScope:\", \"\").replaceAll(\" \", \"\").trim()}/`;\n    obj[rootPath] = initScope;\n    return initScope;\n  } catch {\n    return null;\n  }\n};\n","import { getAllWorkspaces } from \"./get-all-workspaces.js\";\nimport { getLocalPackageScoop } from \"./get-local-package-scope.js\";\n\nexport const allowed_extension = [\".ts\", \".tsx\"];\nexport const allowed_other_extensions = [\".js\", \".jsx\", \".mjs\", \".cjs\", \".json\"];\nexport const all_extensions = [...allowed_other_extensions, allowed_extension];\nexport const root = process.env[\"PIPES_PROJECT_ROOT\"] || process.cwd();\nexport const should_use_source_extension_for_local_packages = process.env[\"PIPES_LOCAL_DEV\"] === \"true\";\nexport const localScope = should_use_source_extension_for_local_packages ? await getLocalPackageScoop(root) : null;\nexport const localProjects = should_use_source_extension_for_local_packages ? await getAllWorkspaces(root) : {};\n","import { dirname, join } from \"node:path\";\n\nimport { fs } from \"./fs.js\";\n\nexport const getPackageType = async (path: string): Promise<\"module\" | \"commonjs\"> => {\n  try {\n    const file = await fs.readFile(join(path, \"./package.json\"), \"utf-8\");\n    const content = JSON.parse(file);\n    if (!(\"type\" in content)) {\n      return \"commonjs\";\n    }\n    return content[\"type\"] === \"module\" ? \"module\" : \"commonjs\";\n  } catch (e) {\n    if (dirname(path) === path) {\n      throw new Error(\"Cannot find file\");\n    }\n    return getPackageType(dirname(path));\n  }\n};\n","import { builtinModules } from \"node:module\";\nimport { extname } from \"node:path\";\nimport { fileURLToPath } from \"node:url\";\n\nimport { transformFile } from \"@swc/core\";\n\nimport { allowed_extension, allowed_other_extensions } from \"./const.js\";\nimport { fs } from \"./libs/fs.js\";\nimport { getPackageType } from \"./libs/get-package-type.js\";\n\nexport interface LoadContext {\n  parentURL?: string | undefined;\n}\n\nexport type LoadFn = (\n  url: string,\n  context: LoadContext,\n  nextLoad: LoadFn,\n) => Promise<{\n  source?: string | Buffer | null | undefined;\n  shortCircuit: boolean;\n  format?: \"commonjs\" | \"module\";\n}>;\n\nexport const load: LoadFn = async (url, context, defaultLoad) => {\n  if (builtinModules.includes(url) || url.startsWith(\"node\")) {\n    return defaultLoad(url, context, defaultLoad);\n  }\n  if (!allowed_extension.includes(extname(url)) && allowed_other_extensions.includes(extname(url))) {\n    return defaultLoad(url, context, defaultLoad);\n  }\n  if (!allowed_extension.includes(extname(url))) {\n    const filePath = fileURLToPath(url);\n    const moduleType = await getPackageType(filePath);\n    return {\n      source: await fs.readFile(filePath),\n      format: moduleType,\n      shortCircuit: true,\n    };\n  }\n  const moduleType = await getPackageType(fileURLToPath(url));\n  /** Transpile all code that ends with ts or tsx */\n  const { code } = await transformFile(fileURLToPath(url), {\n    cwd: process.cwd(),\n    jsc: {\n      target: \"esnext\",\n      parser: {\n        syntax: \"typescript\",\n        dynamicImport: true,\n      },\n      transform: {\n        react: {\n          pragma: \"React.createElement\",\n          pragmaFrag: \"React.Fragment\",\n          throwIfNamespace: true,\n          development: false,\n          useBuiltins: false,\n        },\n      },\n    },\n    sourceMaps: \"inline\",\n    module: {\n      type: moduleType === \"commonjs\" ? \"commonjs\" : \"nodenext\",\n      strict: true,\n    },\n  });\n\n  return {\n    format: moduleType,\n    shortCircuit: true,\n    source: code,\n  };\n};\n","import { fileURLToPath } from \"node:url\";\n\n/**\n * Converts string from file URL to path if needed.\n *\n * @param file File path or URL string\n * @returns null if wrong protocool, else string.\n */\nexport function convertURL(file: string | undefined | null): string | null {\n  if (!file) {\n    return null;\n  }\n  try {\n    const url = new URL(file);\n    if (url.protocol !== \"file:\") {\n      return null;\n    }\n    return fileURLToPath(url);\n  } catch {\n    // empty on purpose\n  }\n  return file;\n}\n","export const isRelativePath = (path: string): boolean => {\n  return !/^(?:\\/|[a-zA-Z]:\\\\|https?:\\/\\/|data:|blob:)/.test(path);\n};\n","import { join } from \"node:path\";\n\nimport { convertURL } from \"./convert-url.js\";\nimport { isRelativePath } from \"./is-relative-path.js\";\n\n/**\n * Returns absolute path.\n * @param path path to file\n * @param parent path to parent\n * @returns string - absolute path\n */\nexport const convertFilePath = (path: string, parent: string | null | undefined): string => {\n  const filePath = convertURL(path);\n  if (!filePath) {\n    throw new Error(\"Invalid url!\");\n  }\n  if (filePath && isRelativePath(filePath)) {\n    return join(parent || process.cwd(), filePath);\n  }\n  return filePath;\n};\n","import { fs } from \"./fs.js\";\n/**\n * @param path - path in the fs.\n */\nexport const isDirectory = async (path: string): Promise<boolean> => {\n  try {\n    const stat = await fs.stat(path);\n    return stat.isDirectory();\n  } catch (error) {\n    return false;\n  }\n};\n","import { dirname } from \"node:path\";\n\nimport { convertURL } from \"./convert-url.js\";\nimport { isDirectory } from \"./is-directory.js\";\n\n/**\n * Checks if the string is a file or directory. Returns directory.\n * @param url fs location\n * @returns null if no directory found or string. Returns dirname of file if file, else path.\n */\nexport async function convertURLToDirectory(url: string | null | undefined): Promise<string | null> {\n  if (!url) {\n    return null;\n  }\n  const path = convertURL(url);\n  if (!path) {\n    return null;\n  }\n  if (await isDirectory(path)) {\n    return path;\n  }\n  const rootDirectory = dirname(path);\n  if (await isDirectory(rootDirectory)) {\n    return rootDirectory;\n  }\n  return null;\n}\n","import { fs } from \"./fs.js\";\n\n/**\n * @param path - path to fs\n * @returns true if file exists, else false.\n */\nexport async function doesFileExists(path: string): Promise<boolean> {\n  try {\n    await fs.access(path, fs.constants.F_OK);\n    return true;\n  } catch (error) {\n    return false;\n  }\n}\n","import { extname } from \"node:path\";\n\nimport { allowed_extension } from \"../const.js\";\n\nimport { doesFileExists } from \"./does-file-exist.js\";\n\n/**\n * Checks if the file is ts, tsx or has a typescript file with different ending\n * @param path path to fs\n * @returns string if it exists else null\n */\nexport async function shouldCompile(path: string): Promise<string | null> {\n  const fileIsHere = await doesFileExists(path);\n  if (fileIsHere) {\n    const currentExtension = extname(path);\n    if (allowed_extension.includes(currentExtension)) {\n      return path;\n    }\n    return null;\n  }\n  for (const extension of allowed_extension) {\n    const newPath = path.replace(/(\\.[^.]+)$/, extension);\n    const newFileExists = await doesFileExists(newPath);\n    if (newFileExists) {\n      return newPath;\n    }\n  }\n  return null;\n}\n","import { builtinModules } from \"node:module\";\nimport { pathToFileURL } from \"node:url\";\n\nimport { localProjects, localScope, should_use_source_extension_for_local_packages } from \"./const.js\";\nimport { convertFilePath } from \"./libs/convert-file-path.js\";\nimport { convertURLToDirectory } from \"./libs/convert-url-to-directory.js\";\nimport { doesFileExists } from \"./libs/does-file-exist.js\";\nimport { isDirectory } from \"./libs/is-directory.js\";\nimport { shouldCompile } from \"./libs/should-compile.js\";\n\nexport interface ResolveContext {\n  parentURL?: string | undefined;\n}\n\nexport type ResolveFn = (\n  url: string,\n  context: ResolveContext,\n  nextResolve: ResolveFn,\n) => Promise<{\n  url: string;\n  shortCircuit: boolean;\n}>;\n\nexport const resolve: ResolveFn = async (url, context, nextResolve) => {\n  /** Ignore builtin modules. */\n  if (url.startsWith(\"node:\") || builtinModules.includes(url)) {\n    return nextResolve(url, context, nextResolve);\n  }\n  /** If we are in source mode and this is a local package - fetch it! */\n  if (should_use_source_extension_for_local_packages && localScope && url.startsWith(localScope)) {\n    const obj = localProjects[url];\n    if (obj) {\n      return {\n        url: pathToFileURL(obj.source).href,\n        shortCircuit: true,\n      };\n    }\n  }\n  /**\n   * 1. parentURL\n   * Check if parentURL is defined || Set process.cwd() as parentURL\n   * Convert parentURL from URL to string - if needed\n   * Check if parentURL is file or directory - use dirname if file\n   * 2. filePath\n   * Convert filePath from URL to string - if needed\n   * Join with parentURL if it is a relative path.\n   */\n  const parentURL = await convertURLToDirectory(context?.parentURL);\n  const filePath = convertFilePath(url, parentURL);\n\n  /**\n   * Compile if:\n   * a) the file exists and has a .ts .tsx ending\n   * b) the file does not exist but a file with .ts .tsx ending does\n   */\n  const compileFile = await shouldCompile(filePath);\n\n  /** Ignore files who do not meet those conditions */\n  if (!compileFile && (await doesFileExists(filePath))) {\n    const fileIsDirectory = await isDirectory(filePath);\n    if (!fileIsDirectory) {\n      return nextResolve(url, context, nextResolve);\n    }\n    return nextResolve(url, context, nextResolve);\n  }\n\n  if (!compileFile) {\n    return nextResolve(url, context, nextResolve);\n  }\n\n  /** Tell nodejs to compile! */\n  return {\n    url: pathToFileURL(compileFile).href,\n    shortCircuit: true,\n  };\n};\n"],"names":["getAllWorkspaces","root","json","JSON","parse","readFile","join","jsonWorkspaces","workspaces","map","e","split","projects","values","Promise","all","glob","content","relative","source","dist","workspaceRoot","replace","absolutePath","sep","name","filter","value","obj","getLocalPackageScoop","rootPath","file","data","match","initScope","replaceAll","trim","allowed_extension","allowed_other_extensions","process","env","cwd","should_use_source_extension_for_local_packages","localScope","localProjects","getPackageType","path","fs","dirname","Error","load","url","context","defaultLoad","builtinModules","includes","startsWith","extname","filePath","fileURLToPath","moduleType","format","shortCircuit","code","transformFile","jsc","target","parser","syntax","dynamicImport","transform","react","pragma","pragmaFrag","throwIfNamespace","development","useBuiltins","sourceMaps","module","type","strict","convertURL","URL","protocol","isRelativePath","test","convertFilePath","parent","isDirectory","stat","error","convertURLToDirectory","rootDirectory","doesFileExists","access","constants","F_OK","shouldCompile","fileIsHere","currentExtension","extension","newPath","newFileExists","resolve","nextResolve","pathToFileURL","href","parentURL","compileFile","fileIsDirectory"],"mappings":"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"}