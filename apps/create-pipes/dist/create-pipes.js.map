{"version":3,"file":"create-pipes.js","sources":["../src/const.ts","../src/package-json.ts","../src/pipes.ts","../src/yarnrc.ts","../src/main.ts","../src/create-pipes.ts"],"sourcesContent":["import { readFileSync } from \"node:fs\";\nimport { dirname, join } from \"node:path\";\nimport { fileURLToPath } from \"node:url\";\n\nconst rootDir = fileURLToPath(dirname(dirname(import.meta.url)));\nconst packageJSONPath = join(rootDir, \"package.json\");\nconst packageJSON = JSON.parse(readFileSync(packageJSONPath, \"utf-8\"));\n\nconst packageManager = packageJSON[\"packageManager\"].split(\"yarn@\")[1];\nconst version = packageJSON[\"version\"];\n\n// TODO: This should be auto generated\nexport const YARN_VERSION = packageManager as string;\nexport const VERSION = version as string;\n","interface Props {\n  name: string;\n  version: string;\n  yarnVersion: string;\n}\nexport const PackageJSON = ({ name, version, yarnVersion }: Props): string => {\n  return JSON.stringify(\n    {\n      name,\n      version: \"0.0.1\",\n      packageManager: `yarn@${yarnVersion}`,\n      type: \"module\",\n      scripts: {\n        dev: \"node src/ci.tsx\",\n      },\n      dependencies: {\n        \"@island-is/pipes-core\": version,\n      },\n    },\n    null,\n    2,\n  );\n};\n","export const sourceFile = [\n  'import { createPipe } from \"@island-is/pipes-core\";',\n  \"\",\n  \"await createPipe(({ createPipesCore }) => {\",\n  \"  const mainContext = createPipesCore();\",\n  \"  mainContext.addScript(() => {\",\n  \"    console.log(`Hello world`);\",\n  \"  });\",\n  \"  return [mainContext];\",\n  \"});\",\n  \"\",\n].join(\"\\n\");\n","export const createYARNRC = (): string => {\n  return [\n    \"injectEnvironmentFiles:\",\n    \"   - .env.root?\",\n    \"nmMode: hardlinks-local\",\n    \"nodeLinker: node-modules\",\n    'npmScopes: { island-is: { npmRegistryServer: \"https://npm.pkg.github.com\" } }',\n  ].join(\"\\n\");\n};\n","import fs from \"node:fs\";\nimport path from \"node:path\";\n\nimport { z } from \"@island-is/pipes-core\";\n\nimport { VERSION, YARN_VERSION } from \"./const.js\";\nimport { PackageJSON } from \"./package-json.js\";\nimport { sourceFile } from \"./pipes.js\";\nimport { createYARNRC } from \"./yarnrc.js\";\n\nimport type { WriteFileOptions } from \"node:fs\";\n\nexport function getAppPaths(root: string, appName: string): { appPath: string; srcPath: string } {\n  const appPath = path.join(root, appName);\n  const srcPath = path.join(appPath, \"src\");\n  return { appPath, srcPath };\n}\n\nexport function createDirectories(path: string): void {\n  fs.mkdirSync(path, { recursive: true });\n}\n\nexport function writeFile(filePath: string, content: string, encoding: WriteFileOptions = \"utf-8\"): void {\n  fs.writeFileSync(filePath, content, encoding);\n}\n\nexport function main(root = process.cwd(), appNameArg: string | undefined = undefined): void {\n  const appName = z\n    .string()\n    .default(appNameArg, {\n      arg: {\n        long: \"appName\",\n        positional: true,\n      },\n    })\n    .parse(undefined);\n\n  const { appPath, srcPath } = getAppPaths(root, appName);\n\n  createDirectories(srcPath);\n\n  writeFile(path.join(srcPath, \"ci.tsx\"), sourceFile);\n  writeFile(path.join(appPath, \"yarn.lock\"), \"\");\n\n  const packageJsonPath = path.join(appPath, \"package.json\");\n  const packageJsonContent = PackageJSON({\n    name: appName,\n    yarnVersion: YARN_VERSION,\n    version: VERSION,\n  });\n  writeFile(packageJsonPath, packageJsonContent);\n\n  const yarnrcPath = path.join(appPath, \".yarnrc.yml\");\n  writeFile(yarnrcPath, createYARNRC());\n\n  console.log(\"App has been created successfully.\");\n}\n","import { main } from \"./main.js\";\n\nlet ble: string = \"hehe\";\nmain();\n"],"names":["rootDir","fileURLToPath","dirname","url","packageJSONPath","join","packageJSON","JSON","parse","readFileSync","packageManager","split","version","YARN_VERSION","VERSION","PackageJSON","name","yarnVersion","stringify","type","scripts","dev","dependencies","sourceFile","createYARNRC","getAppPaths","root","appName","appPath","path","srcPath","createDirectories","fs","mkdirSync","recursive","writeFile","filePath","content","encoding","writeFileSync","main","process","cwd","appNameArg","undefined","z","string","default","arg","long","positional","packageJsonPath","packageJsonContent","yarnrcPath","console","log"],"mappings":"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"}