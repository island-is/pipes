name: Release

on:
  issue_comment:
    types:
      - created

jobs:
  debug:
    runs-on: ubuntu-latest
    steps:
      - name: User
        run: |
          echo ${{ github.evcent.issue.user.login }}
      - name: Debug condition 1
        run: |
          RESULT1=$(echo "${{ github.event.issue.user.login == 'dependabot[bot]' }}")
          echo "Condition 1: github.event.issue.user.login == 'dependabot[bot]' => $RESULT1"

      - name: Debug condition 2
        run: |
          RESULT2=$(echo "${{ startsWith(github.event.issue.title, 'Release draft for version:') }}")
          echo "Condition 2: startsWith(github.event.issue.title, 'Release draft for version:') => $RESULT2"

      - name: Debug condition 3
        run: |
          RESULT3=$(echo "${{ contains(fromJson(vars.RELEASE_MANAGERS), github.event.comment.user.login) }}")
          echo "Condition 3: contains(fromJson(vars.RELEASE_MANAGERS), github.event.comment.user.login) => $RESULT3"

      - name: Debug condition 4
        run: |
          RESULT4=$(echo "${{ startsWith(github.event.comment.body, 'release') }}")

  release:
    runs-on: ec2-runners
    if: |
      github.event.issue.user.login == 'dependabot[bot]' &&
      startsWith(github.event.issue.title, 'Release draft for version:') &&
      contains(fromJson(vars.RELEASE_MANAGERS), github.event.comment.user.login) &&
      startsWith(github.event.comment.body, 'release')
    container:
      image: public.ecr.aws/m3u4c4h9/island-is/actions-runner-public:latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Extract SHA from issue body
        id: extract-sha
        run: |
          SHA_REGEX="SHA: \[([a-f0-9]+)\]"
          if [[ "${{ github.event.issue.body }}" =~ $SHA_REGEX ]]; then
            echo "SHA::${BASH_REMATCH[1]}"
            echo "SHA=${BASH_REMATCH[1]}" >> $GITHUB_ENV
          fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ env.SHA }}
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: ".nvmrc"
          cache: "yarn"
          cache-dependency-path: "yarn.lock"
      - name: Install dependencies
        run: yarn install
      - name: Run script
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          PIPES_ACTION: Release
          RELEASE_BODY: ${{ github.event.issue.body }}
        run: yarn node src/ci.tsx
        working-directory: ./ci
